// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Craiglist.Automation.Features.Housing
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Housing: Sorting", Description="Verify is it sorting feature working currectly on housing page.", SourceFile="Features\\Housing\\Sorting.feature", SourceLine=0)]
    public partial class HousingSortingFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Sorting.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Housing: Sorting", "Verify is it sorting feature working currectly on housing page.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Housing => Sorting: Sorting by price from highest to lowest working", new string[] {
                "Housing"}, SourceLine=4)]
        public virtual void HousingSortingSortingByPriceFromHighestToLowestWorking()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Housing => Sorting: Sorting by price from highest to lowest working", null, new string[] {
                        "Housing"});
#line 5
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
 testRunner.Given("I have opened \'Housing\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When("I select [Price Highest to Lowest] sorting value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then("Prodcuts should be sorted by price from highest to lowest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Housing => Sorting: Sorting by price from lowest to highest working", new string[] {
                "Housing"}, SourceLine=10)]
        public virtual void HousingSortingSortingByPriceFromLowestToHighestWorking()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Housing => Sorting: Sorting by price from lowest to highest working", null, new string[] {
                        "Housing"});
#line 11
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 12
 testRunner.Given("I have opened \'Housing\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
 testRunner.When("I select [Price Lowest to Highest] sorting value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then("Prodcuts should be sorted by price from lowest to highest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Housing => Sorting: Sorting by price from lowest to highest working when was sele" +
            "cted not default sorting value", new string[] {
                "Housing"}, SourceLine=16)]
        public virtual void HousingSortingSortingByPriceFromLowestToHighestWorkingWhenWasSelectedNotDefaultSortingValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Housing => Sorting: Sorting by price from lowest to highest working when was sele" +
                    "cted not default sorting value", null, new string[] {
                        "Housing"});
#line 17
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 18
 testRunner.Given("I have opened \'Housing\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
 testRunner.And("I have selected [Newest] sorting value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.When("I select [Price Lowest to Highest] sorting value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then("Prodcuts should be sorted by price from lowest to highest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Housing => Sorting: Sorting by price from highest to lowest working when was sele" +
            "cted not default sorting value", new string[] {
                "Housing"}, SourceLine=23)]
        public virtual void HousingSortingSortingByPriceFromHighestToLowestWorkingWhenWasSelectedNotDefaultSortingValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Housing => Sorting: Sorting by price from highest to lowest working when was sele" +
                    "cted not default sorting value", null, new string[] {
                        "Housing"});
#line 24
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 25
 testRunner.Given("I have opened \'Housing\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
 testRunner.And("I have selected [Upcoming] sorting value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.When("I select [Price Highest to Lowest] sorting value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.Then("Prodcuts should be sorted by price from highest to lowest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Housing => Sorting: Sorting by price from lowest to highest working if selected t" +
            "wo times one by one", new string[] {
                "Housing"}, SourceLine=30)]
        public virtual void HousingSortingSortingByPriceFromLowestToHighestWorkingIfSelectedTwoTimesOneByOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Housing => Sorting: Sorting by price from lowest to highest working if selected t" +
                    "wo times one by one", null, new string[] {
                        "Housing"});
#line 31
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 32
 testRunner.Given("I have opened \'Housing\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 33
 testRunner.And("I have selected [Price Lowest to Highest] sorting value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
 testRunner.When("I select [Price Lowest to Highest] sorting value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
    testRunner.Then("Prodcuts should be sorted by price from lowest to highest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Housing => Sorting: Sorting by price from highest to lowest working if selected t" +
            "wo times one by one", new string[] {
                "Housing"}, SourceLine=37)]
        public virtual void HousingSortingSortingByPriceFromHighestToLowestWorkingIfSelectedTwoTimesOneByOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Housing => Sorting: Sorting by price from highest to lowest working if selected t" +
                    "wo times one by one", null, new string[] {
                        "Housing"});
#line 38
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 39
 testRunner.Given("I have opened \'Housing\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
 testRunner.And("I have selected [Price Highest to Lowest] sorting value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.When("I select [Price Highest to Lowest] sorting value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
 testRunner.Then("Prodcuts should be sorted by price from highest to lowest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void HousingSortingDefaultValuesSortingValueCanBeSelectedFromSortingDropdown(string sortingValues, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Housing"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Housing => Sorting => Default Values: Sorting value can be selected from sorting " +
                    "dropdown", null, @__tags);
#line 45
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 46
 testRunner.Given("I have opened \'Housing\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 47
 testRunner.When("I press on [Sorting] dropdown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then(string.Format("{0} in [Sorting] dropdown can be selected", sortingValues), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Housing => Sorting => Default Values: Sorting value can be selected from sorting " +
            "dropdown, Variant 0", new string[] {
                "Housing"}, SourceLine=51)]
        public virtual void HousingSortingDefaultValuesSortingValueCanBeSelectedFromSortingDropdown_Variant0()
        {
#line 45
this.HousingSortingDefaultValuesSortingValueCanBeSelectedFromSortingDropdown("price ↑", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Housing => Sorting => Default Values: Sorting value can be selected from sorting " +
            "dropdown, Variant 1", new string[] {
                "Housing"}, SourceLine=51)]
        public virtual void HousingSortingDefaultValuesSortingValueCanBeSelectedFromSortingDropdown_Variant1()
        {
#line 45
this.HousingSortingDefaultValuesSortingValueCanBeSelectedFromSortingDropdown("price ↓", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Housing => Sorting => Default Values: Sorting value can be selected from sorting " +
            "dropdown, Variant 2", new string[] {
                "Housing"}, SourceLine=51)]
        public virtual void HousingSortingDefaultValuesSortingValueCanBeSelectedFromSortingDropdown_Variant2()
        {
#line 45
this.HousingSortingDefaultValuesSortingValueCanBeSelectedFromSortingDropdown("upcoming", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Housing => Sorting => Default Values: Sorting value can be selected from sorting " +
            "dropdown, Variant 3", new string[] {
                "Housing"}, SourceLine=51)]
        public virtual void HousingSortingDefaultValuesSortingValueCanBeSelectedFromSortingDropdown_Variant3()
        {
#line 45
this.HousingSortingDefaultValuesSortingValueCanBeSelectedFromSortingDropdown("newest", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Housing => Sorting => Default Values: Number of default values in sorting dropdow" +
            "n should be the same as in requirements", new string[] {
                "Housing"}, SourceLine=57)]
        public virtual void HousingSortingDefaultValuesNumberOfDefaultValuesInSortingDropdownShouldBeTheSameAsInRequirements()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Housing => Sorting => Default Values: Number of default values in sorting dropdow" +
                    "n should be the same as in requirements", null, new string[] {
                        "Housing"});
#line 58
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 59
 testRunner.Given("I have opened \'Housing\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 60
 testRunner.When("I press on [Sorting] dropdown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 61
 testRunner.Then("Number of default values in sorting dropdown should be \'4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Housing => Sorting = View: Sorting by price from lowest to highest working when w" +
            "as selected thumb view", new string[] {
                "Housing"}, SourceLine=63)]
        public virtual void HousingSortingViewSortingByPriceFromLowestToHighestWorkingWhenWasSelectedThumbView()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Housing => Sorting = View: Sorting by price from lowest to highest working when w" +
                    "as selected thumb view", null, new string[] {
                        "Housing"});
#line 64
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 65
 testRunner.Given("I have opened \'Housing\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 66
 testRunner.And("I have selected [Thumb] view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.When("I select [Price Lowest to Highest] sorting value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 68
 testRunner.Then("Prodcuts should be sorted by price from lowest to highest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Housing => Sorting => View: Sorting by price from highest to lowest working when " +
            "was selected thumb view", new string[] {
                "Housing"}, SourceLine=70)]
        public virtual void HousingSortingViewSortingByPriceFromHighestToLowestWorkingWhenWasSelectedThumbView()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Housing => Sorting => View: Sorting by price from highest to lowest working when " +
                    "was selected thumb view", null, new string[] {
                        "Housing"});
#line 71
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 72
 testRunner.Given("I have opened \'Housing\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 73
 testRunner.And("I have selected [Thumb] view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.When("I select [Price Highest to Lowest] sorting value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then("Prodcuts should be sorted by price from highest to lowest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Housing => Sorting => View: Sorting by price from lowest to highest working when " +
            "was selected list view", new string[] {
                "Housing"}, SourceLine=78)]
        public virtual void HousingSortingViewSortingByPriceFromLowestToHighestWorkingWhenWasSelectedListView()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Housing => Sorting => View: Sorting by price from lowest to highest working when " +
                    "was selected list view", null, new string[] {
                        "Housing"});
#line 79
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 80
 testRunner.Given("I have opened \'Housing\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 81
 testRunner.And("I have selected [List] view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 82
 testRunner.When("I select [Price Lowest to Highest] sorting value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 83
 testRunner.Then("Prodcuts should be sorted by price from lowest to highest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Housing => Sorting => View: Sorting by price from highest to lowest working when " +
            "was selected list view", new string[] {
                "Housing"}, SourceLine=85)]
        public virtual void HousingSortingViewSortingByPriceFromHighestToLowestWorkingWhenWasSelectedListView()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Housing => Sorting => View: Sorting by price from highest to lowest working when " +
                    "was selected list view", null, new string[] {
                        "Housing"});
#line 86
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 87
 testRunner.Given("I have opened \'Housing\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 88
 testRunner.And("I have selected [List] view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.When("I select [Price Highest to Lowest] sorting value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 90
 testRunner.Then("Prodcuts should be sorted by price from highest to lowest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Housing => Sorting => Hidden Product: Sorting by price from lowest to highest wor" +
            "king when product was hidden", new string[] {
                "Housing"}, SourceLine=93)]
        public virtual void HousingSortingHiddenProductSortingByPriceFromLowestToHighestWorkingWhenProductWasHidden()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Housing => Sorting => Hidden Product: Sorting by price from lowest to highest wor" +
                    "king when product was hidden", null, new string[] {
                        "Housing"});
#line 94
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 95
 testRunner.Given("I have opened \'Housing\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 96
 testRunner.And("I have selected [Price Lowest to Highest] sorting value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.When("I press [Hide Product] button for product in the middle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 98
 testRunner.Then("Prodcuts should be sorted by price from lowest to highest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Housing => Sorting => Hidden Product: Sorting by price from highest to lowest wor" +
            "king when was hidden", new string[] {
                "Housing"}, SourceLine=100)]
        public virtual void HousingSortingHiddenProductSortingByPriceFromHighestToLowestWorkingWhenWasHidden()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Housing => Sorting => Hidden Product: Sorting by price from highest to lowest wor" +
                    "king when was hidden", null, new string[] {
                        "Housing"});
#line 101
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 102
 testRunner.Given("I have opened \'Housing\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 103
 testRunner.And("I have selected [Price Highest to Lowest] sorting value", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 104
 testRunner.When("I press [Hide Product] button for product in the middle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 105
 testRunner.Then("Prodcuts should be sorted by price from highest to lowest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
